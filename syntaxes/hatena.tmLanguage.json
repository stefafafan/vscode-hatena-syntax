{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Hatena",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#headings"
		},
		{
			"include": "#lists"
		},
		{
			"include": "#quotes"
		},
		{
			"include": "#html"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.other.id.hatena",
					"match": "\\b(id:[a-zA-Z][a-zA-Z0-9_-]{1,30}[a-zA-Z0-9]:?(detail|image)?:?(large)?)\\b"
				},
				{
					"name": "keyword.other.question.hatena",
					"match": "\\b(question:[0-9]+:?(title|detail|image)?)\\b"
				},
				{
					"name": "keyword.other.fotolife.hatena",
					"match": "\\b(f:id:[a-zA-Z][a-zA-Z0-9_-]{1,30}[a-zA-Z0-9]:[a-zA-Z0-9]+:(image|plain)?:?((title|alt)=.*)?:?((title|alt)=.*)?)$"
				},
				{
					"name": "keyword.other.product.hatena",
					"match": "\\b((isbn|asin):[0-9]+:?(title|detail|image)?)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.hatena",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.hatena",
					"match": "\\\\."
				}
			]
		},
		"headings": {
			"patterns": [{
				"name": "markup.heading.hatena",
				"match": "^(\\*{1,3})[^\\*]*$",
				"captures": {
					"1": {
						"name": "punctuation.definition.heading.markdown"
					}
				}
			}]
		},
		"lists": {
			"patterns": [
				{
					"name": "markup.list.numbered.hatena",
					"match": "^(\\++).*$",
					"captures": {
						"1": {
							"name": "punctuation.definition.list.begin.markdown"
						}
					}
				},
				{
					"name": "markup.list.unnumbered.hatena",
					"match": "^(\\-+).*$",
					"captures": {
						"1": {
							"name": "punctuation.definition.list.begin.markdown"
						}
					}
				}
			]
		},
		"quotes": {
			"patterns": [
				{
					"name": "markup.quote.hatena",
					"begin": "^(>>)$",
					"end": "^(<<)$",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					}
				},
				{
					"name": "markup.quote.pre.hatena",
					"begin": "^(>\\|)$",
					"end": "^(\\|<)$",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					}
				},
				{
					"name": "markup.quote.superpre.hatena",
					"begin": "^(>\\|[a-z0-9]*\\|)$",
					"end": "^(\\|[a-z0-9]*\\|<)$",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					},
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.quote.begin.markdown"
						}
					}
				}
			]
		},
		"html": {
			"patterns": [
				{
					"begin": "(^|\\G)\\s*(<!--)",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.html"
						},
						"2": {
							"name": "punctuation.definition.comment.html"
						}
					},
					"end": "(-->)",
					"name": "comment.block.html"
				},
				{
					"begin": "(?i)(^|\\G)\\s*(?=<(script|style|pre)(\\s|$|>)(?!.*?</(script|style|pre)>))",
					"end": "(?i)(.*)((</)(script|style|pre)(>))",
					"endCaptures": {
						"1": {
							"patterns": [
								{
									"include": "text.html.derivative"
								}
							]
						},
						"2": {
							"name": "meta.tag.structure.$4.end.html"
						},
						"3": {
							"name": "punctuation.definition.tag.begin.html"
						},
						"4": {
							"name": "entity.name.tag.html"
						},
						"5": {
							"name": "punctuation.definition.tag.end.html"
						}
					},
					"patterns": [
						{
							"begin": "(\\s*|$)",
							"patterns": [
								{
									"include": "text.html.derivative"
								}
							],
							"while": "(?i)^(?!.*</(script|style|pre)>)"
						}
					]
				},
				{
					"begin": "(?i)(^|\\G)\\s*(?=</?[a-zA-Z]+[^\\s/&gt;]*(\\s|$|/?>))",
					"patterns": [
						{
							"include": "text.html.derivative"
						}
					],
					"while": "^(?!\\s*$)"
				},
				{
					"begin": "(^|\\G)\\s*(?=(<[a-zA-Z0-9\\-](/?>|\\s.*?>)|</[a-zA-Z0-9\\-]>)\\s*$)",
					"patterns": [
						{
							"include": "text.html.derivative"
						}
					],
					"while": "^(?!\\s*$)"
				}
			]
		}
	},
	"scopeName": "source.hatena"
}